{"version":3,"sources":["../source/ucumFunctions.js"],"names":["UcumFunctions","constructor","funcs","cnvTo","x","cnvFrom","Math","log","LN10","pow","exp","LN2","tan","atan","sqrt","func","forName","fname","toLowerCase","f","Error","isDefined"],"mappings":"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","sourcesContent":["/*\n * This class manages the special functions used by some units.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nclass UcumFunctions {\n\n  /**\n   * Constructor\n   *\n   * Creates the singleton object that contains the list of functions used\n   * to convert special units.\n   */\n  constructor() {\n\n    // Create the hash containing the function pairs\n    this.funcs = {};\n\n    // Celsius - convert to Celsius from kelvin and from Celsius to kelvin\n    // where kelvin is the base unit for temperature\n    this.funcs['cel'] = {cnvTo   : function(x){return x - 273.15;},\n                      cnvFrom : function(x){return x + 273.15;}};\n\n    // Fahrenheit - convert to Fahrenheit from kelvin and from Fahrenheit to\n    // kelvin - which is the base unit for temperature\n    this.funcs['degf'] = {cnvTo   : function(x){return x - 459.67;},\n                       cnvFrom : function(x){return x + 459.67;}};\n\n    // Reaumur - convert between Reaumur and Kelvin.   Because of the way the\n    // calling code in the Units class is set up (in the convertFrom method),\n    // what is given here as the convertTo function is actually the convert\n    // from method and vice versa.\n    //this.funcs['degre'] = {cnvTo   : function(x){return x + 273.15;},\n    //                    cnvFrom : function(x){return x - 273.15;}};\n    this.funcs['degre'] = {cnvTo   : function(x){return x - 273.15;},\n                        cnvFrom : function(x){return x + 273.15;}};\n\n    // pH - convert to pH from moles per liter and from moles per liter to pH\n    // where a mole is an amount of a substance (a count of particles)\n    this.funcs['ph'] = {cnvTo  : function(x){return - Math.log(x) / Math.LN10;},\n                     cnvFrom : function(x){return Math.pow(10, -x);}};\n\n    // ln - natural logarithm (base e 2.71828) - apply (cnvTo) and invert (cnvFrom)\n    // and 2ln - two times the natural logarithm\n    this.funcs['ln'] = {cnvTo : function(x){return Math.log(x);},\n                     cnvFrom : function(x){return Math.exp(x);}};\n    this.funcs['2ln'] = {cnvTo : function(x){return 2 * Math.log(x);},\n                      cnvFrom : function(x){return Math.exp(x / 2);}};\n\n    // lg - the decadic logarithm (base 10)\n    this.funcs['lg'] = {cnvTo : function(x){return Math.log(x) / Math.LN10;},\n                     cnvFrom : function(x){return Math.pow(10, x);}};\n    this.funcs['10lg'] = {cnvTo : function(x){return 10 * Math.log(x)/Math.LN10;},\n                       cnvFrom : function(x){return Math.pow(10, x / 10);}};\n    this.funcs['20lg'] = {cnvTo : function(x){return 20 * Math.log(x)/Math.LN10;},\n                       cnvFrom : function(x){return Math.pow(10, x / 20);}};\n    // The plain text ucum units file uses '2lg'\n    this.funcs['2lg'] = {cnvTo : function(x){return 2 * Math.log(x)/Math.LN10;},\n                           cnvFrom : function(x){return Math.pow(10, x / 2);}};\n    // The xml essence ucum file uses lgTimes2\n    this.funcs['lgtimes2'] = this.funcs['2lg'];\n\n    // ld - dual logarithm (base 2)\n    this.funcs['ld'] = {cnvTo : function(x){return Math.log(x)/Math.LN2;},\n                     cnvFrom : function(x){return Math.pow(2, x);}};\n\n    // tan - tangent\n    this.funcs['100tan'] = {cnvTo : function(x){return Math.tan(x) * 100;},\n                         cnvFrom : function(x){return Math.atan(x/100);}};\n    // the xml essence ucum file uses both 100tan and tanTimes100\n    this.funcs['tanTimes100'] = this.funcs['100tan'] ;\n\n    // sqrt - square root\n    this.funcs['sqrt'] = {cnvTo : function(x){return Math.sqrt(x);},\n                       cnvFrom : function(x){return x*x;}};\n\n    // inv - inverse\n    this.funcs['inv'] = {cnvTo : function(x){return 1.0 / x;},\n                      cnvFrom : function(x){return 1.0 / x;}};\n\n    // homeopathic potency functions\n    this.funcs['hpX'] = {cnvTo : function(x){return -(this.funcs['lg'](x));},\n                      cnvFrom : function(x){return Math.pow(10, -x);}};\n\n    this.funcs['hpC'] = {cnvTo : function(x){\n                              return -(this.func['ln'](x))/this.funcs['ln'](100);},\n                       cnvFrom : function(x){return Math.pow(100, -x);}};\n\n    this.funcs['hpM'] = {cnvTo : function(x){\n                              return -(this.funcs['ln'](x))/this.funcs['ln'](1000);},\n                      cnvFrom : function(x){return Math.pow(1000, -x);}};\n\n    this.funcs['hpQ'] = {cnvTo : function(x){\n                              return -(this.funcs['ln'](x))/this.funcs['ln'](50000);},\n                      cnvFrom : function(x){return Math.pow(50000, -x);}};\n\n  } // end of constructor\n\n\n  /**\n   * Returns the function with the name specified\n   *\n   * @param fname name of the function to be returned\n   * @return the function with the specified name\n   * @throws an error message if the function is not found\n   */\n  forName(fname) {\n    fname = fname.toLowerCase();\n\n    let f = this.funcs[fname] ;\n    if (f === null)\n      throw(new Error(`Requested function ${fname} is not defined`));\n    return f;\n  }\n\n\n  /**\n   * Returns a flag indicating whether or not the function has been\n   * defined.\n   *\n   * @param fname name of the function in question\n   * @return true if it has been defined; false if not\n   */\n  isDefined(fname) {\n    fname = fname.toLowerCase();\n    return this.funcs[fname] !== null;\n  }\n\n} // end of UcumFunctions class\n\nexport default new UcumFunctions(); // one singleton instance\n"],"file":"ucumFunctions.js"}