<!DOCTYPE html>
<html lang="en">
<head>
    <title>{{title}}</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <script type="text/javascript" src="js/jquery-3.4.1.js"></script>
    <script type="text/javascript" src="js/jquery-ui-1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="js/jquery-ui-1.12.1/jquery-ui.css"/>

    <script type="text/javascript" src="js/fhir-client.js"></script>

    <!-- chartjs - see: https://www.chartjs.org/docs/latest/getting-started/installation.html -->
    <!-- chartjs-plugin-annotation - see: https://github.com/chartjs/chartjs-plugin-annotation -->
    <script type="text/javascript" src="node_modules/regression/dist/regression.js"></script>
    <script type="text/javascript" src="node_modules/moment/moment.js"></script>
    <script type="text/javascript" src="node_modules/chart.js/dist/Chart.bundle.js"></script>
    <script type="text/javascript" src="node_modules/chartjs-plugin-annotation/chartjs-plugin-annotation.js"></script>

    <link rel="stylesheet" href="css/app.css"/>
    <script type="text/javascript" src="js/app.js"></script>
    <script type="text/javascript" src="js/app-ui.js"></script>
    <script type="text/javascript" src="js/cqf-ruler.js"></script>
    <script type="text/javascript">
        function getFHIRServer() {
            return window.fhirServer;
        }

        function getFHIRBearerToken() {
            return window.fhirBearerToken;
        }

        function getFHIRUser() {
            return window.fhirUser;
        }

        function getFHIRPatient() {
            return window.fhirPatient;
        }

        function getFHIRObservations() {
            return window.fhirObservations;
        }

        // example snagged from https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/file-upload-Spring-Boot-Ajax-example

        async function setFHIRCredentials(serverUrl, bearerToken) {
            let formData = new FormData();
            formData.append("serverUrl", serverUrl);
            formData.append("bearerToken", bearerToken);
            let response = await fetch("/session/setFHIRCredentials", {
                method: "POST",
                body: formData
            });

            if (response.status === 200) {
                alert(response);
            }
        }

        // see the following for FHIR API documentation:
        // - https://github.com/smart-on-fhir/client-js/blob/master/dist/build/fhir-client.js
        // - http://docs.smarthealthit.org/client-js/
        // - http://docs.smarthealthit.org/client-js/api.html
        // - http://docs.smarthealthit.org/client-js/client.html
        // - http://docs.smarthealthit.org/client-js/request.html

        $(document).ready(function () {
            enableHover('.tab');
            $(document).on('click', '#tabs .tab', function () {
                markTabSelected(this);
                renderSelectedTabDiv();
            });

            FHIR.oauth2.ready(function (client) {
                window.fhirServer = client.state.serverUrl;
                window.fhirBearerToken = client.state.tokenResponse.access_token;

                setFHIRCredentials(window.fhirServer, window.fhirBearerToken);

                $('#loadingContent').addClass('hidden');
                $('#content').removeClass('hidden');

                client.patient.read().then(function (p) {
                    window.fhirPatient = p;
                    document.getElementById('name').innerHTML = extractPatientName(p);
                });

                client.user.read().then(function (u) {
                    window.fhirUser = u;
                });

                fetchBloodPressureData(client, function (observations, data) {
                    window.fhirObservations = observations;
                    $('#loadingTextInfo').addClass('hidden');
                    $('#textInfo').removeClass('hidden');
                    populateSummaryDiv(data, document.getElementById("summaryDiv"));
                    populateBPList(data, document.getElementById('bpList'));

                    $('#loadingChart').addClass('hidden');
                    $('#chart').removeClass('hidden');
                    window.chartData = data;
                    buildChart(data);
                    buildChartSlider(data);

                    populatePlanDefinitions(function () {
                        $('#loadingHooks').addClass('hidden');
                        $('#hooks').removeClass('hidden');
                    });
                });
            });
        });
    </script>
</head>
<body>
<div id="loadingContent">
    Loading ...
</div>
<div id="content" class="hidden">
    <div id="header">
        Blood Pressure readings for <span id="name">Loading ...</span>
    </div>
    <div id="textInfoContainer">
        <div id="loadingTextInfo" class="loading">Loading Details ...</div>
        <div id="textInfo" class="hidden">
            <div id="tabs">
                <div class="tab selected" data-assocDivID="summaryDiv">Summary</div>
                <div class="tab" data-assocDivID="detailsDiv">Details</div>
            </div>
            <div id="tabData">
                <div id="summaryDiv">
                    // todo: add summary info
                </div>
                <div id="detailsDiv" class="hidden">
                    <ul id="bpList"></ul>
                </div>
            </div>
        </div>
    </div>
    <div id="chartContainer">
        <div id="loadingChart" class="loading">Loading Chart ...</div>
        <canvas id="chart" class="hidden" width="800" height="400"></canvas>
        <div id="sliderContainer">
            <input type="text" id="sliderRangeFrom" readonly size="4"/>
            <div style="width: 10px;"></div>
            <div id="chartRangeSlider"></div>
            <div style="width: 10px;"></div>
            <input type="text" id="sliderRangeTo" readonly size="4"/>
        </div>
    </div>
    <div id="hooksContainer">
        <div id="loadingHooks" class="loading">Loading Hooks ...</div>
        <div id="hooks" class="hidden">
            <select id="planSelect" onchange="planDefinitionChanged();">
            </select>
            <input id="executeHookButton" type="button" value="Execute PlanDefinition"
                   onclick="executeSelectedPlanDefinition();" disabled/>
        </div>
        <div id="plans">
        </div>
        <div id="cards">
        </div>
    </div>
</div>
</body>
</html>