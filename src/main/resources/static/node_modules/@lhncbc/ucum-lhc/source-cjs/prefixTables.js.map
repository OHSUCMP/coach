{"version":3,"sources":["../source/prefixTables.js"],"names":["PrefixTablesFactory","constructor","byCode_","byValue_","prefixCount","Object","keys","length","allPrefixesByValue","prefixBuff","pList","pLen","p","pfx","getPrefixByValue","code_","name_","value_","allPrefixesByCode","prefixList","sort","push","getPrefixByCode","add","prefixObj","getCode","getValue","isDefined","code","undefined","value","prefixTablesInstance","PrefixTables","getInstance"],"mappings":";;;;;;;AAAA;;;;AAIA;;;;;;AAMO,MAAMA,mBAAN,CAA0B;AAE/B;;;;;;;;AAQAC,EAAAA,WAAW,GAAE;AACX,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAGD;;;;;;AAIAC,EAAAA,WAAW,GAAG;AACZ,WAAOC,MAAM,CAACC,IAAP,CAAY,KAAKJ,OAAjB,EAA0BK,MAAjC;AACD;AAGD;;;;;;;AAKAC,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,KAAK,GAAGL,MAAM,CAACC,IAAP,CAAY,KAAKH,QAAjB,CAAZ,CAFmB,CAGnB;;AACA,QAAIQ,IAAI,GAAGD,KAAK,CAACH,MAAjB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7B,UAAIC,GAAG,GAAG,KAAKC,gBAAL,CAAsBJ,KAAK,CAACE,CAAD,CAA3B,CAAV;AACAH,MAAAA,UAAU,IAAII,GAAG,CAACE,KAAJ,GAAY,GAAZ,GAAkBF,GAAG,CAACG,KAAtB,GAA8B,IAA9B,GAAqCH,GAAG,CAACI,MAAzC,GAAkD,MAAhE;AACD;;AACD,WAAOR,UAAP;AACD;AAED;;;;;;;;;;AAQAS,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIT,KAAK,GAAGL,MAAM,CAACC,IAAP,CAAY,KAAKJ,OAAjB,CAAZ;AACAQ,IAAAA,KAAK,CAACU,IAAN;AACA,QAAIT,IAAI,GAAGD,KAAK,CAACH,MAAjB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7BO,MAAAA,UAAU,CAACE,IAAX,CAAgB,KAAKC,eAAL,CAAqBZ,KAAK,CAACE,CAAD,CAA1B,CAAhB;AACD;;AACD,WAAOO,UAAP;AACD;AAED;;;;;;;AAKAI,EAAAA,GAAG,CAACC,SAAD,EAAW;AACZ,SAAKtB,OAAL,CAAasB,SAAS,CAACC,OAAV,EAAb,IAAoCD,SAApC;AACA,SAAKrB,QAAL,CAAcqB,SAAS,CAACE,QAAV,EAAd,IAAsCF,SAAtC;AACD;AAGD;;;;;;;;;;;AASAG,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,WAAO,KAAK1B,OAAL,CAAa0B,IAAb,MAAuB,IAAvB,IAA+B,KAAK1B,OAAL,CAAa0B,IAAb,MAAuBC,SAA7D;AACD;AAGD;;;;;;;;AAMAP,EAAAA,eAAe,CAACM,IAAD,EAAO;AACpB,WAAO,KAAK1B,OAAL,CAAa0B,IAAb,CAAP;AACD;AAGD;;;;;;;;AAMAd,EAAAA,gBAAgB,CAACgB,KAAD,EAAQ;AACtB,WAAO,KAAK3B,QAAL,CAAc2B,KAAd,CAAP;AACD;;AAzG8B,C,CA2G/B;AAGF;AACA;;;;AACA,IAAIC,oBAAoB,GAAG,IAAI/B,mBAAJ,EAA3B;AACO,MAAMgC,YAAY,GAAG;AAC1BC,EAAAA,WAAW,EAAE,YAAW;AACtB,WAAOF,oBAAP;AACD;AAHyB,CAArB","sourcesContent":["/**\n * The tables of defined prefixes is defined in this file.\n */\n\n/**\n * This class implements the table of multiplier prefixes.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\nexport class PrefixTablesFactory {\n\n  /**\n   * Constructor.  This creates the empty PrefixTable hashes once.\n   * There is one hash whose key is the prefix code and one whose\n   * key is the prefix value.\n   *\n   * Implementation of this as a singleton is based on the UnitTables\n   * implementation.  See that class for details.\n   */\n  constructor(){\n    this.byCode_ = {} ;\n    this.byValue_ = {};\n  }\n\n\n  /**\n   * Provides the number of prefix objects in each table\n   * @returns count of the number of prefix objects in each table\n   */\n  prefixCount() {\n    return Object.keys(this.byCode_).length ;\n  }\n\n\n  /**\n   * This is used to get all prefix objects by value.  Currently it is used\n   * to create a csv file with all prefixes and units.\n   * @returns csv string containing all prefix objects, ordered by value.\n   */\n  allPrefixesByValue() {\n    let prefixBuff = '';\n    let pList = Object.keys(this.byValue_);\n    //pList.sort() ;\n    let pLen = pList.length;\n    for (let p = 0; p < pLen; p++) {\n      let pfx = this.getPrefixByValue(pList[p]) ;\n      prefixBuff += pfx.code_ + ',' + pfx.name_ + ',,' + pfx.value_ + '\\r\\n';\n    }\n    return prefixBuff ;\n  }\n\n  /**\n   * This is used to get all prefix objects.  Currently it is used\n   * to get the objects to write to the json ucum definitions file\n   * that is used to provide prefix and unit definition objects for\n   * conversions and validations.\n   *\n   * @returns an array containing all prefix objects, ordered by code.\n   */\n  allPrefixesByCode() {\n    let prefixList = [];\n    let pList = Object.keys(this.byCode_);\n    pList.sort() ;\n    let pLen = pList.length;\n    for (let p = 0; p < pLen; p++) {\n      prefixList.push(this.getPrefixByCode(pList[p])) ;\n    }\n    return prefixList ;\n  }\n\n  /**\n   * Adds a prefix object to the tables\n   *\n   * @param prefixObj the object to be added to the tables\n   */\n  add(prefixObj){\n    this.byCode_[prefixObj.getCode()] = prefixObj;\n    this.byValue_[prefixObj.getValue()] = prefixObj;\n  }\n\n\n  /**\n   * Tests whether a prefix object is found for a specified code.  This\n   * is used to determine whether or not a prefix object has been created\n   * for the code.\n   *\n   * @param code the code to be used to find the prefix object\n   * @return boolean indicating whether or not a prefix object was found\n   *  for the specified code\n   */\n  isDefined(code) {\n    return this.byCode_[code] !== null && this.byCode_[code] !== undefined ;\n  }\n\n\n  /**\n   * Obtains a prefix object for a specified code.\n   *\n   * @param code the code to be used to find the prefix object\n   * @return the prefix object found, or null if nothing was found\n   */\n  getPrefixByCode(code) {\n    return this.byCode_[code];\n  }\n\n\n  /**\n   * Obtains a prefix object for a specified value.\n   *\n   * @param value the value to be used to find the prefix object\n   * @return the prefix object found, or null if nothing was found\n   */\n  getPrefixByValue(value) {\n    return this.byValue_[value];\n  }\n\n} // end PrefixTablesFactory class\n\n\n// Create a singleton instance and (to preserve the existing API) an object that\n// provides that instance via getInstance().\nvar prefixTablesInstance = new PrefixTablesFactory();\nexport const PrefixTables = {\n  getInstance: function() {\n    return prefixTablesInstance;\n  }\n}\n"],"file":"prefixTables.js"}