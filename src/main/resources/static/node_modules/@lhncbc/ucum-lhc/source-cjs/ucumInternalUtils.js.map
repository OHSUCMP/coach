{"version":3,"sources":["../source/ucumInternalUtils.js"],"names":["UnitTables","require","isNumericString","theString","num","isNaN","parseFloat","isIntegerUnit","str","test","getSynonyms","theSyn","retObj","utab","getInstance","resp","getUnitBySynonym","aLen","length","a","theUnit","csCode_","name_","guidance_"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAYA;;;;;;AAOA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,UAA5C;AAGA;;;;;;;;;;;AASO,SAASE,eAAT,CAAyBC,SAAzB,EAAoC;AACzC,MAAIC,GAAG,GAAG,KAAKD,SAAf,CADyC,CACf;;AAC1B,SAAO,CAACE,KAAK,CAACD,GAAD,CAAN,IAAe,CAACC,KAAK,CAACC,UAAU,CAACF,GAAD,CAAX,CAA5B;AACD,C,CAAC;;AAGF;;;;;;;;;;;AASO,SAASG,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,SAAO,QAAQC,IAAR,CAAaD,GAAb,CAAP;AACD;AAGD;;;;;;;;;;;;;;;;;AAeO,SAASE,WAAT,CAAqBC,MAArB,EAA6B;AAElC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,IAAI,GAAGb,UAAU,CAACc,WAAX,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACAA,EAAAA,IAAI,GAAGF,IAAI,CAACG,gBAAL,CAAsBL,MAAtB,CAAP,CALkC,CAOlC;;AACA,MAAI,CAACI,IAAI,CAAC,OAAD,CAAT,EAAoB;AAClBH,IAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBG,IAAI,CAAC,QAAD,CAAvB;AACAH,IAAAA,MAAM,CAAC,KAAD,CAAN,GAAgBG,IAAI,CAAC,KAAD,CAApB;AACD,GAHD,MAIK;AACHH,IAAAA,MAAM,CAAC,QAAD,CAAN,GAAmB,WAAnB;AACA,QAAIK,IAAI,GAAGF,IAAI,CAAC,OAAD,CAAJ,CAAcG,MAAzB;AACAN,IAAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,EAAlB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,EAA3B,EAA+B;AAC7B,UAAIC,OAAO,GAAGL,IAAI,CAAC,OAAD,CAAJ,CAAcI,CAAd,CAAd;AACAP,MAAAA,MAAM,CAAC,OAAD,CAAN,CAAgBO,CAAhB,IAAqB;AACnB,gBAAQC,OAAO,CAACC,OADG;AAEnB,gBAAQD,OAAO,CAACE,KAFG;AAGnB,oBAAYF,OAAO,CAACG;AAHD,OAArB;AAID,KAVE,CAUD;;AACH,GAvBiC,CAuBhC;;;AACF,SAAOX,MAAP;AAED,C,CAAC","sourcesContent":["/**\n * Internal utilities used by multiple UCUM classes.  For example,\n * isNumericString is used by both the UnitString and UcumLhcUtils\n * classes.  If it's in the UnitString class the UcumLhcUtils class\n * needs to require the UnitString class.  But the checkSynonyms\n * class is used by the UnitString class - but was in the UcumLhcUtils\n * class.  Requiring the UcumLhcUtils class from the UnitString class\n * made everything break (cyclical requires).\n *\n * So now they're here.\n */\n\n/**\n * This module implements internal ucum utilities.\n *\n * @author Lee Mericle, based on java version by Gunther Schadow\n *\n */\n\nvar UnitTables = require('./unitTables.js').UnitTables ;\n\n\n/**\n * This function tests a string to see if it contains only numbers (digits,\n * a period, leading - or +).  This code was taken from a stackoverflow\n * solution:\n * https://stackoverflow.com/questions/175739/is-there-a-built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number/42356340#42356340\n *\n * @params theString\n * @returns true if the string contains only numbers; false otherwise\n */\nexport function isNumericString(theString) {\n  let num = \"\" + theString; //coerce num to be a string\n  return !isNaN(num) && !isNaN(parseFloat(num));\n} // end isNumericString\n\n\n/**\n *  Checks whether a string qualifies as an integer unit.  Section 2.2.8 (\"integer\n *  numbers\", says, \"A positive integer number may appear in place of a simple\n *  unit symbol.  Only a pure string of decimal digits (‘0’–‘9’) is\n *  interpreted as a number.\"\n *  Note:  This leaves open the question of whether \"0\" is a valid unit, since\n *  it is positive, but you can't measure anything in units of zero.\n * @param str the string to check\n */\nexport function isIntegerUnit(str) {\n  return /^\\d+$/.test(str);\n}\n\n\n/**\n * This method accepts a term and looks for units that include it as\n * a synonym - or that include the term in its name.\n *\n * @param theSyn the term to search for.  This is assumed to be\n *  a string and not undefined.  The calling method should do any\n *  necessary checking before calling this.\n * @returns a hash with up to three elements:\n *  'status' contains the status of the request, which can be 'error',\n *    'failed' or succeeded';\n *  'msg' which contains a message for an error or if no units were found; and\n *  'units' which is an array that contains one array for each unit found:\n *    the unit's csCode_, the unit's name_, and the unit's guidance_\n *\n */\nexport function getSynonyms(theSyn) {\n\n  let retObj = {} ;\n  let utab = UnitTables.getInstance();\n  let resp = {} ;\n  resp = utab.getUnitBySynonym(theSyn);\n\n  // If we didn't get any units, transfer the status and message\n  if (!resp['units']) {\n    retObj['status'] = resp['status'];\n    retObj['msg'] = resp['msg'];\n  }\n  else {\n    retObj['status'] = 'succeeded';\n    let aLen = resp['units'].length ;\n    retObj['units'] = [];\n    for (let a = 0; a < aLen; a++) {\n      let theUnit = resp['units'][a];\n      retObj['units'][a] = {\n        'code': theUnit.csCode_,\n        'name': theUnit.name_,\n        'guidance': theUnit.guidance_};\n    } // end do for all units returned\n  } // end if we got a units list\n  return retObj ;\n\n} // end getSynonyms\n\n"],"file":"ucumInternalUtils.js"}